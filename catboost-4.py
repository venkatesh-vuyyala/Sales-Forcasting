# -*- coding: utf-8 -*-
"""Catboost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18_D3wd1oG24VkVKFTYgJ1HndVIUmqnCt
"""

!pip install catboost

import pandas as pd
import numpy as np
import seaborn as sb
import matplotlib.pyplot as plt
import lightgbm as lgb
import catboost as cb
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

import warnings
warnings.filterwarnings('ignore')

train_df = pd.read_csv('/content/train.csv')
test_df = pd.read_csv('/content/test.csv')

train_df.info()

test_df.info()

import matplotlib.pyplot as plt
import seaborn as sb  # Assuming seaborn is imported as 'sb'

# Create subplots to display distribution plots for numeric columns in 'num_cols'
num_cols = ['QuickRatio', 'InventoryRatio', 'RevenueGrowth', 'MarketshareChange','Sales']
plt.subplots(figsize=(15, 5))
for i, col in enumerate(num_cols):
    plt.subplot(1, len(num_cols), i+1)  # Adjust the number of subplots
    sb.histplot(train_df[col], kde=True)  # Use histplot instead of distplot for newer versions of seaborn
plt.tight_layout()
plt.show()

train_df.drop(['ID', 'Quarter'],
        inplace=True, axis=1)
train_df.dropna(subset=['Sales'], inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')
train_df['InventoryRatio'] = imputer.fit_transform(train_df[['InventoryRatio']])
scaler = StandardScaler()
train_df['InventoryRatio'] = scaler.fit_transform(train_df[['InventoryRatio']])

imputer = SimpleImputer(strategy='mean')
test_df['InventoryRatio'] = imputer.fit_transform(test_df[['InventoryRatio']])
scaler = StandardScaler()
test_df['InventoryRatio'] = scaler.fit_transform(test_df[['InventoryRatio']])

cat_cols = []

# Iterate through DataFrame columns
for col in train_df.columns:
    if train_df[col].dtype == 'object' and train_df[col].nunique() < 10:
        # Add the column to the list
        cat_cols.append(col)
cat_cols += ['QuickRatio', 'InventoryRatio', 'RevenueGrowth', 'MarketshareChange']
cat_cols



# For each categorical column in 'cat_cols',
# calculate and print the mean rent for each category
for i, col in enumerate(cat_cols):
    print(train_df[[col, 'Sales']].groupby(col).mean())
    print()

columns = ['Company','Bond rating',
 'Stock rating',
 'Region',
 'Industry']

# Extract the columns you want to encode
data = train_df[columns]

# Initialize the OneHotEncoder
encoder = OneHotEncoder(handle_unknown='ignore')

# Fit and transform the data
encoded_data = encoder.fit_transform(data)

# Convert the encoded data into a DataFrame
encoded_df = pd.DataFrame(encoded_data.toarray(), columns=encoder.get_feature_names_out(columns))

# Now 'encoded_df' contains the one-hot encoded columns

data_test = test_df[columns]

test_encoded = encoder.transform(data_test)

test_encoded_df = pd.DataFrame(test_encoded.toarray(), columns=encoder.get_feature_names_out(columns))

df = pd.concat([train_df.drop(columns=columns), encoded_df], axis=1)

df_test = pd.concat([test_df.drop(columns=columns), test_encoded_df], axis=1)

num_cols = ['QuickRatio', 'InventoryRatio', 'RevenueGrowth', 'MarketshareChange','Sales']
train_df[num_cols] = np.log1p(train_df[num_cols])

# Create subplots to display distribution plots
# for the log-transformed numeric columns
plt.subplots(figsize=(15, 5))
for i, col in enumerate(num_cols):
    plt.subplot(1, len(num_cols), i+1)  # Adjust the number of subplots
    sb.histplot(train_df[col], kde=True)

# Ensures proper spacing between subplots
plt.tight_layout()
# Display the subplots
plt.show()

X = df.drop(columns=["Sales"])
y = df["Sales"]

X.columns

test_pred = df_test.drop(columns=["ID", "Quarter"])

# CatBoost Regression Model
from catboost import CatBoostRegressor, Pool
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

X_train.shape, X_test.shape

train_dataset = cb.Pool(X_train, y_train)
test_dataset = cb.Pool(X_test, y_test)

df.isnull().sum()

# Initialize the CatBoostRegressor with RMSE as the loss function
model = cb.CatBoostRegressor(
    loss_function='RMSE',iterations=3000, learning_rate = 0.07)

model.fit(
    train_dataset,  # Training dataset
    eval_set=test_dataset,  # Validation dataset
    verbose=100  # Specify the logging frequency (e.g., print training progress every 100 iterations)
)

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.inspection import permutation_importance

pred = model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(y_test, pred)))
r2 = r2_score(y_test, pred)

print('RMSE: {:.2f}'.format(rmse))
print('R2: {:.2f}'.format(r2))

