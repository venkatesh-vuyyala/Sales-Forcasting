# -*- coding: utf-8 -*-
"""MLP-final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WwGNmlJOBy9Fyg_2XAIeBh4KmJ5br2bR
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
# Importing Libraries
import pandas as pd
# Importing Imputer
from sklearn.impute import SimpleImputer
# import column transform
from sklearn.compose import ColumnTransformer
# importing encoders
from sklearn.preprocessing import StandardScaler, OneHotEncoder
# importing pipeline
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt
import seaborn as sns

test_df = pd.read_csv('/content/test.csv')
train_df = pd.read_csv('/content/train.csv')
test_df

imputer = SimpleImputer(strategy='mean')
train_df['InventoryRatio'] = imputer.fit_transform(train_df[['InventoryRatio']])

imputer = SimpleImputer(strategy='mean')
test_df['InventoryRatio'] = imputer.fit_transform(test_df[['InventoryRatio']])

# removing colums in df
train_df = train_df.drop(["ID","Quarter"], axis=1)
train_df.dropna(subset=['Sales'], inplace=True)

columns = ['Company', 'Stock rating','Bond rating', 'Stock rating', 'Region',
       'Industry']

# Extract the columns you want to encode
data = train_df[columns]

# Initialize the OneHotEncoder
encoder = OneHotEncoder(handle_unknown='ignore')

# Fit and transform the data
encoded_data = encoder.fit_transform(data)

# Convert the encoded data into a DataFrame
encoded_df = pd.DataFrame(encoded_data.toarray(), columns=encoder.get_feature_names_out(columns))

# Now 'encoded_df' contains the one-hot encoded columns

data_test = test_df[columns]

test_encoded = encoder.transform(data_test)

test_encoded_df = pd.DataFrame(test_encoded.toarray(), columns=encoder.get_feature_names_out(columns))

df = pd.concat([train_df.drop(columns=columns), encoded_df], axis=1)

df_test = pd.concat([test_df.drop(columns=columns), test_encoded_df], axis=1)

df.columns

X = df.drop(columns=['Sales'])
Y = df["Sales"]

test_pred = df_test.drop(columns=["ID", "Quarter"])

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15, random_state=42)

from sklearn.neural_network import MLPRegressor
mlp_reg = MLPRegressor(hidden_layer_sizes=(115,55),
                       max_iter = 1500,activation = 'relu',
                       solver = 'adam')

mlp_reg.fit(X_train,Y_train)

train_score = mlp_reg.score(X_train, Y_train)
print(f"Training R^2 score: {train_score:.2f}")
test_score = mlp_reg.score(X_test, Y_test)
print(f"Testing R^2 score: {test_score:.2f}")

mlp_reg.fit(X,Y)

train_score = mlp_reg.score(X, Y)
print(f"Training R^2 score: {train_score:.2f}")

predictions = mlp_reg.predict(test_pred)

sales = pd.DataFrame(predictions, columns=["Sales"])
result = pd.concat([test_df['ID'], sales], axis=1)

result.to_csv("mlp-final.csv", index=False)

# Read submission data
submission_data = pd.read_csv('mlp-final.csv')
submission_data

param_grid = {
    'hidden_layer_sizes': [(150,100,50), (120,80,40), (100,50,30)],
    'max_iter': [50, 100],
    'activation': ['tanh', 'relu'],
    'solver': ['sgd', 'adam'],
    'alpha': [0.0001, 0.05],
    'learning_rate': ['constant','adaptive'],
}